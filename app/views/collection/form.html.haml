:javascript
  // find the element $("form input");
  // FOR ALL THE INPUTS, GET THE VALUES $(input1).val()
  // same format .json { title: b}
  // MAIN
  $(function(){
    $('textarea').unbind();
    $('.help-block').children().hide();
      var data = {
              "name": "A Case Study of Non-User-Centered Design for a Police Emergency-Response System Aaron",
              "main_image":"AMA1.png",
              "developmentCycle":"Product Refinement",
              "designPhase":"Problem Assessment"
          }
      $('#submit').click(function(){
  
        // TODO
        var allInputs = $('input');
  
        for(var i = 0; i < allInputs.length; i++) { 
          // console.log($(allInputs[i]).attr('data-name'),$(allInputs[i]).val() ); 
  
        //  //title
        //  // val
          var el = allInputs[i]
          var name = $(el).attr('data-name'); 
          var val = $(el).val();
  
          if(typeof name !== undefined)
            data[name] = val;
        }
  
        ///
        $.ajax({
          type: "POST",
          url: "/collection/send_casestudy",
          data: data,
          success: function(data){
              console.log(data);
          },
          dataType: "json"
        });
  
  
      });
  
  })
  
  $('[data-toggle="tooltip"]').tooltip({'placement': 'top'});
:css
  .help-block{
    list-style: none;
    /*height: 30px;*/
    padding-left: 0;
  
  }
  .dropdown-menu li{
    cursor: pointer;
  }
  textarea{
    resize: none;
  }
  .btn-fixed{
    width: 170px;
    text-align: left;
  }
  .btn-fixed span{
  
    margin-left: 15px;
  }
- @options
- @helper_text
.grid_7
  .panel.panel-primary
    .panel-heading Case Study Editing Form
    .panel-body
      %form{:role => "form"}
        - @attr.each do |name, metadata|
          - if @options.has_key?(name.to_sym)
          - elsif metadata.type == :string
            .form-group
              %label{:for => name}= name.underscore.humanize
              %br/
              %input.form-control{"data-name" => name, :id => name, :value => "#{@cs[name]}"}/
          - elsif metadata.type == :boolean
            .form-group.grid_12
              %input{"data-name" => name, :type => "checkbox", :value => "option1"}/
              = name.underscore.humanize
          - elsif metadata.type == :text
            .form-group.grid_12
              %label{:for => name}= name.underscore.humanize
              %br/
              %textarea.form-control{:cols => "50", "data-name" => name, :id => name, :rows => "5"}
                = @cs[name]
          / <p class="help-block"> <haml_loud> metadata.type </haml_loud></p>
        - dropdowns = ["development_cycle", "design_phase", "project_domain", "customer_type", "user_age", "privacy_level", "social_setting"]
        .form-group
          %table.table
            - dropdowns.each do |name|
              %tr
                %td
                  %label{:for => name}
                    = name.underscore.humanize
                    %span.glyphicon.glyphicon-question-sign
                %td
                  .btn-group
                    %button.btn-fixed.btn.btn-default.dropdown-toggle{"data-toggle" => "dropdown", :type => "button"}
                      %span.caret
                      = @options[name.to_sym][0]
                    %ul.dropdown-menu{:role => "menu"}
                      - @options[name.to_sym].each_with_index do |choice, i|
                        %li{"data-index" => i, "data-name" => choice}
                          %a= choice
              / <tr class='info'><td colspan="3">djflksdajflkj</td></tr>
        .checkbox
          %label
            %input{"data-name" => "permission", :type => "checkbox"}/
            I give permission to the Design Exchange to use the information from this case study for the DesignExchange Database.
        %button.btn.btn-primary{:type => "submit"} Submit
.grid_5.omega
  .panel.panel-default
    .panel-heading
      Author Information
    .panel-body
      %h5 Company
      %table.table.table-striped
        / 
        %tr
          %td
            = @company.name
          %td
            = @company.domain
          %td
            %span.glyphicon.glyphicon-edit
      %h5 Contacts
      %table.table.table-striped
        %tr
          - @contacts.each do |c|
            %td
              = c.name
            %td
              = c.email
            %td
              %span.glyphicon.glyphicon-edit
  .panel.panel-default
    .panel-heading
      Methods
    .panel-body
      .input-group
        %input#design_method_search.form-control{:type => "text"}/
        .input-group-btn
          %button.btn.btn-default.add-method{"data-csid" => "#{@cs.id}", :type => "button"}
            %span.glyphicon.glyphicon-plus
            Add
        / /btn-group
      / /input-group
      %br/
      %table#methods.table.table-striped
        %tbody
          - @methods.each do |c|
            %tr
              %th
                = c.name.humanize
                %span.remove-method.glyphicon.glyphicon-remove.pull-right
            %tr
              %td
                = c.overview
:javascript
  $(function(){
      
      var cache = {};
      $('#design_method_search').autocomplete(DE.Autocomplete);
      
      $('button.add-method').click(function(){
        val = $('#design_method_search').val();
        if(val == "") return;
        data = {"m" : val, "cs" : $(this).attr('data-csid')};
        $.ajax({
          type: "POST",
          url: "/collection/linkmethod",
          data: data,
          success: function(data){updateTable();},
          dataType: "json"
        });
      })
  
      
      $("span.remove-method").click(function(){ removeMethod($(this).parent().html().split('<')[0])});
    });
  
  function updateTable(){
    $.get("/collection/links?n=#{@cs.id}", function(data){
        var methods = [];
        for(var i in data){
          var method = [];
          console.log(data[i]);
          method[0] = DOM.tag("tr").append(DOM.tag("th").html(data[i].name).append(DOM.tag("span").addClass("remove-method glyphicon glyphicon-remove pull-right").click(function(){
              removeMethod($(this).parent().html().split('<')[0]);
          })));
          method[1] = DOM.tag("tr").append(DOM.tag("td").html(data[i].overview));
          methods.push(method);
        }
        $('table#methods tbody').html("");
        for(var i in methods)
          $('table#methods tbody').append(methods[i]);
    });
  }
  function removeMethod(name){
    console.log(name);
    var data = {"m" : name, "cs" : #{@cs.id}};
    $.ajax({
          type: "DELETE",
          url: "/collection/removemethod",
          data: data,
          success: function(data){ updateTable(); },
          dataType: "json"
        });
  }
  
  $('form').find('.dropdown-menu li').hover(function(){
    var help_id = $(this).attr('data-index');
  
    var helper_text = $(this).parent().parent().siblings('ul');
    if(helper_text.length > 0){
      var htext = helper_text.children('li[data-index="'+ help_id +'"]');
      if(htext.length > 0)
        htext.show().siblings().hide();
      else
        helper_text.children().hide();
    }
  });
